blueprint:
  name: "Sonoff SNZB-06P Smart Device Control"
  description: >
    This blueprint automates device control using the Sonoff SNZB-06P Human Presence Sensor.
    When presence is detected, it turns on your selected devices—typically lights, switches, or outlets—
    while taking ambient light conditions into account.

    **Features:**
    - **Adaptive Darkness Detection:**  
      The blueprint determines darkness either by a dedicated light sensor (if enabled) or by using sun data with configurable sunset/sunrise offsets.
    - **Always On Mode:**  
      When enabled, this mode forces the devices on regardless of the ambient light.
      This is ideal for use with the Adaptive Lighting add-on. For more details, see [Adaptive Lighting on GitHub](https://github.com/basnijholt/adaptive-lighting).
    - **Lighting Modes:**  
      Choose between an instant switch (immediate on/off) or smooth transitions (fading effects for compatible lights).
    - **Zigbee Sensitivity Adjustment:**  
      The blueprint sets a Zigbee cluster attribute on your sensor based on your selected sensitivity (low, medium, or high).
    - **Manual Override:**  
      If devices remain on (e.g. from manual adjustments), the automation waits a defined time before resuming control.

    Configure your sensor, timing, and target devices below to integrate your smart presence sensor seamlessly.
  domain: automation
  input:
    sensor_presence_sensor:
      name: "Presence Sensor"
      description: "Select the Sonoff SNZB-06P Human Presence Sensor."
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
    sensor_presence_sensitivity:
      name: "Presence Sensitivity"
      description: "Adjust the detection sensitivity of the sensor."
      default: "medium"
      selector:
        select:
          options:
            - value: "low"
              label: "Low (2.5 meters)"
            - value: "medium"
              label: "Medium (3.5 meters)"
            - value: "high"
              label: "High (4 meters)"
    sensor_light_sensor:
      name: "Light Sensor (Optional)"
      description: >
        Select a light sensor for detecting light/dark conditions.
        Typically, this sensor has attributes like `illuminance` or `last_illumination_state`.
        Leave empty to use sun data instead.
      default: null
      selector:
        entity:
          domain: sensor
    sensor_use_light_sensor:
      name: "Use Light Sensor Instead of Sun"
      description: "Enable this to use the light sensor for darkness detection rather than sun data."
      default: false
      selector:
        boolean: {}
    mode_always_on_mode:
      name: "Always On Mode"
      description: >
        Enable this to always turn on devices when presence is detected, ignoring light conditions.
        This mode is ideal for use with the Adaptive Lighting add-on.
        For more information, see: https://github.com/basnijholt/adaptive-lighting
      default: false
      selector:
        boolean: {}
    mode_light_mode:
      name: "Lighting Mode"
      description: "Select the switching style: instant (immediate on/off) or smooth (fade in/out)."
      default: "instant"
      selector:
        select:
          options:
            - value: "instant"
              label: "Instant (Immediate On/Off)"
            - value: "smooth"
              label: "Smooth (Fade In/Out)"
    device_target_entities:
      name: "Devices to Control"
      description: "Select the devices (lights, switches, outlets, etc.) to be controlled."
      selector:
        target:
          entity: {}
    timing_sunset_offset:
      name: "Sunset Offset (Minutes)"
      description: "Turn devices on this many minutes before sunset."
      default: 30
      selector:
        number:
          min: 0
          max: 120
          unit_of_measurement: "min"
    timing_sunrise_offset:
      name: "Sunrise Offset (Minutes)"
      description: "Turn devices off this many minutes after sunrise."
      default: 30
      selector:
        number:
          min: 0
          max: 120
          unit_of_measurement: "min"
    timing_motion_timeout:
      name: "Presence Timeout (Seconds)"
      description: "Time in seconds to wait after presence is lost before turning devices off."
      default: 120
      selector:
        number:
          min: 10
          max: 600
          unit_of_measurement: seconds
    timing_override_timeout:
      name: "Manual Override Duration (Minutes)"
      description: "Time in minutes to wait before automation resumes after manual device adjustment."
      default: 10
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
    timing_transition_time:
      name: "Smooth Transition Time (Seconds)"
      description: "Duration in seconds for smooth transitions (for lights that support fading)."
      default: 2
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: seconds

trigger:
  - platform: state
    entity_id: !input sensor_presence_sensor
    to: "on"
  - platform: state
    entity_id: !input sensor_presence_sensor
    to: "off"
    for:
      seconds: !input timing_motion_timeout

condition: []

action:
  - variables:
      sunset_offset: !input timing_sunset_offset
      sunrise_offset: !input timing_sunrise_offset
      use_light_sensor: !input sensor_use_light_sensor
      always_on_mode: !input mode_always_on_mode
      light_sensor: !input sensor_light_sensor
      transition_time: !input timing_transition_time
      presence_sensitivity: !input sensor_presence_sensitivity
      light_mode: !input mode_light_mode
      target_entities: !input device_target_entities
      next_sunset: >
        {{ as_datetime(state_attr("sun.sun", "next_setting")) - timedelta(minutes=sunset_offset|int) }}
      next_sunrise: >
        {{ as_datetime(state_attr("sun.sun", "next_rising")) + timedelta(minutes=sunrise_offset|int) }}
      is_dark: >
        {{ (states("sun.sun") == "below_horizon") or (utcnow() >= next_sunset and utcnow() < next_sunrise) }}
      light_sensor_state: >
        {{ states(light_sensor|string) if light_sensor else none }}
      darkness_detected: >
        {{ always_on_mode or ((states(light_sensor|string) == "dark") if use_light_sensor else is_dark) }}
      selected_transition: >
        {{ transition_time if light_mode == "smooth" else 0 }}

  - service: zha.set_zigbee_cluster_attribute
    data:
      ieee: "{{ device_attr(!input sensor_presence_sensor, 'ieee') }}"
      endpoint_id: 1
      cluster_id: 64528
      cluster_type: "in"
      attribute: 0
      value: >
        {% if presence_sensitivity == "low" %}
          0
        {% elif presence_sensitivity == "medium" %}
          1
        {% else %}
          2
        {% endif %}

  - choose:
      - conditions:
          - condition: state
            entity_id: !input sensor_presence_sensor
            state: "on"
          - condition: template
            value_template: "{{ darkness_detected }}"
        sequence:
          - service: homeassistant.turn_on
            target: !input device_target_entities
            data:
              transition: "{{ selected_transition }}"
      - conditions:
          - condition: state
            entity_id: !input sensor_presence_sensor
            state: "off"
        sequence:
          - delay:
              seconds: !input timing_motion_timeout
          - service: homeassistant.turn_off
            target: !input device_target_entities
            data:
              transition: "{{ selected_transition }}"
      - conditions:
          - condition: template
            value_template: >
              {{ expand(target_entities.entity_id) | selectattr("state", "eq", "on") | list | count > 0 }}
        sequence:
          - delay:
              minutes: !input timing_override_timeout
          - service: homeassistant.turn_off
            target: !input device_target_entities
            data:
              transition: "{{ selected_transition }}"

mode: restart

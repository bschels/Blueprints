blueprint:
  name: "Smart Relay Control (Sonoff Mini R4M with SonoffLAN)"
  description: >
    This blueprint is designed for the Sonoff Mini R4M using the SonoffLAN integration.
    
    It supports two modes:
    
    **Detached Mode (Smart Control):**
      - Set the Mini R4M to detached relay mode so it sends a clear action signal ("single", "double", or "long")
        without toggling its relay automatically.
      - Control any smart entity:
          - **Single Tap:**  
            If the entity’s ID starts with "light.", it toggles via light.toggle; otherwise, it uses homeassistant.toggle.
          - **Double Tap:** Optionally trigger a scene.
          - **Long Press:** Adjusts brightness (only for lights) using the specified increment and direction.
    
    **Relay Mode (Direct Relay Control):**
      - The action sensor triggers a direct toggle of the relay.
      - Provide the relay (switch) entity representing the Mini R4M’s relay.
    
    **Setup:**
      - **Action Sensor:** Select the sensor that reports the Mini R4M’s button events.
      - For detached mode, assign your target smart entity.
      - For relay mode, assign the Mini R4M’s relay (switch) entity.
      
  domain: automation

  input:
    action_sensor:
      name: "Action Sensor"
      description: >
        Select the sensor entity that reports the button press events
        ("single", "double", or "long") from your Sonoff Mini R4M.
      selector:
        entity:
          domain: sensor

    relay_mode:
      name: "Control Mode"
      description: >
        Choose the control mode:
          - **detached:** For smart control of an entity (with optional brightness control for lights).
          - **relay:** To directly toggle the Mini R4M’s relay.
      default: detached
      selector:
        select:
          options:
            - detached
            - relay

    target_entity:
      name: "Target Entity (Smart Control)"
      description: >
        (Detached mode only) Select any smart entity to control.
        - **Single Tap:**  
          If the entity’s ID begins with "light.", it toggles via light.toggle;
          otherwise, it uses homeassistant.toggle.
        - **Double Tap:** Optionally trigger a scene.
        - **Long Press:** Adjust brightness if the entity is a light.
      selector:
        entity: {}

    target_other:
      name: "Relay Entity (Relay Mode)"
      description: >
        (Relay mode only) Select the switch entity representing the Mini R4M’s relay.
        This entity will be toggled directly.
      selector:
        entity:
          domain: switch
      default: ""

    double_tap_scene:
      name: "Double Tap Scene"
      description: >
        (Detached mode only) Optionally, select a scene to trigger on a double tap.
      selector:
        entity:
          domain: scene
      default: ""

    dimming_increment:
      name: "Dimming Increment"
      description: >
        (Detached mode only, for lights) Specify the brightness step (in %) for a long press.
      default: 20
      selector:
        number:
          min: 5
          max: 50
          unit_of_measurement: "%"

    dimming_direction:
      name: "Dimming Direction"
      description: >
        (Detached mode only, for lights) Choose whether a long press increases or decreases brightness.
      default: up
      selector:
        select:
          options:
            - up
            - down

trigger:
  - platform: state
    entity_id: !input action_sensor

condition: []

action:
  - service: persistent_notification.create
    data:
      title: "Debugging Inputs"
      message: "Target Entity: {{ target_entity }} | Relay Entity: {{ target_other }} | Scene: {{ double_tap_scene }}"

  - choose:
      # Detached Mode: Smart Control
      - conditions:
          - condition: template
            value_template: >
              {{ relay_mode == 'detached'
                 and trigger.to_state.state in ['single', 'double', 'long']
                 and target_entity is not none and target_entity != '' }}
        sequence:
          - choose:
              # Single Tap: Toggle target entity.
              - conditions:
                  - condition: template
                    value_template: "{{ target_entity.startswith('light.') }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: !input target_entity
              - default:
                  - condition: template
                    value_template: "{{ target_entity is not none and target_entity != '' }}"
                  - service: homeassistant.toggle
                    target:
                      entity_id: !input target_entity
          - choose:
              # Double Tap: Trigger scene if provided.
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger.to_state.state == 'double' 
                         and double_tap_scene is not none 
                         and double_tap_scene != '' }}
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input double_tap_scene
          - choose:
              # Long Press: Adjust brightness (only if target is a light).
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == 'long' and target_entity.startswith('light.') }}"
                sequence:
                  - variables:
                      current_brightness: "{{ state_attr(target_entity, 'brightness') | int | default(0) }}"
                      new_brightness: >
                        {% if dimming_direction == 'up' %}
                          {{ [current_brightness + dimming_increment, 255] | min }}
                        {% else %}
                          {{ [current_brightness - dimming_increment, 0] | max }}
                        {% endif %}
                  - service: light.turn_on
                    target:
                      entity_id: !input target_entity
                    data:
                      brightness: "{{ new_brightness }}"

      # Relay Mode: Direct Relay Control
      - conditions:
          - condition: template
            value_template: >
              {{ relay_mode == 'relay'
                 and trigger.to_state.state in ['single', 'double']
                 and target_other is not none and target_other != '' }}
        sequence:
          - service: switch.toggle
            target:
              entity_id: !input target_other

mode: restart

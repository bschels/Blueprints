blueprint:
  name: "Smart Relay Control (Sonoff Mini R4M with SonoffLAN)"
  description: >
    This blueprint is designed exclusively for the **Sonoff Mini R4M** when used with the **SonoffLAN** integration.

    The Mini R4M can be used in two modes:

    **Detached Mode (Smart Control):**
    - The Mini R4M is set to detached relay mode so it sends a single, clear action signal (such as "single", "double", or "long")
      without toggling its relay automatically.
    - Use this mode to control smart devices (for example, a smart light or a scene).
    - **Long press functionality is intended for rocker switches only.** In this case, you can adjust brightness.
      You can choose whether a long press will increase or decrease brightness via the "Dimming Direction" option.

    **Relay Mode (Direct Relay Control):**
    - In this mode, the same action sensor is used, but you also provide the relay (switch) entity from the Mini R4M.
    - The blueprint uses the sensor event to trigger a `switch.toggle` on the relay entity.

    **Setup:**
      - **Action Sensor:** Select the sensor that reports the button events.
      - For **detached mode** (smart control), assign your target smart light (and optionally a scene for double tap).
      - For **relay mode**, assign the Mini R4M's relay (switch) entity.
      - **Dimming Options:** The "Dimming Increment" defines the step size. The "Dimming Direction" sets whether a long press increases ("up") or decreases ("down") brightness.
      
  domain: automation

  input:
    action_sensor:
      name: "Action Sensor"
      description: >
        Select the sensor entity that reports the button press actions from your Sonoff Mini R4M.
        This sensor should send states like "single", "double", or "long" depending on the press.
      selector:
        entity:
          domain: sensor

    relay_mode:
      name: "Relay Control Mode"
      description: >
        Choose the control mode:
          - **detached:** Use this mode for smart control (e.g., toggling a smart light or triggering a scene).
          - **relay:** Use this mode to directly toggle the relay of the Mini R4M (for nonâ€‘smart devices).
      default: detached
      selector:
        select:
          options:
            - detached
            - relay

    target_light:
      name: "Target Smart Light"
      description: >
        (Detached mode only) Select a smart light to control with the action sensor events.
        A single tap toggles the light, a double tap can trigger a scene, and a long press adjusts brightness.
      selector:
        entity:
          domain: light
      default: ""

    target_other:
      name: "Non-Smart Device (Relay Mode)"
      description: >
        (Relay mode only) Select the switch entity representing the Mini R4M's relay.
        This is toggled directly when an action sensor event occurs.
      selector:
        entity:
          domain: switch
      default: ""

    double_tap_scene:
      name: "Double Tap Scene"
      description: >
        (Detached mode only) Optionally, select a scene to trigger when a double tap is detected.
      selector:
        entity:
          domain: scene
      default: ""

    dimming_increment:
      name: "Dimming Increment"
      description: >
        (Detached mode only, rocker switches) Specify the brightness change per long press step (in percentage).
      default: 20
      selector:
        number:
          min: 5
          max: 50
          unit_of_measurement: "%"

    dimming_direction:
      name: "Dimming Direction"
      description: >
        (Detached mode only, rocker switches) Choose the brightness adjustment direction for a long press:
          - **up:** Increases brightness.
          - **down:** Decreases brightness.
      default: up
      selector:
        select:
          options:
            - up
            - down

trigger:
  - platform: state
    entity_id: !input action_sensor

condition: []

action:
  - choose:
      # Detached Mode (Smart Control)
      - conditions:
          - condition: template
            value_template: >
              {{ relay_mode == 'detached'
                 and trigger.to_state.state in ['single', 'double', 'long']
                 and target_light != '' }}
        sequence:
          - choose:
              # Single tap: Toggle the smart light.
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == 'single' }}"
                sequence:
                  - service: light.toggle
                    target:
                      entity_id: !input target_light

              # Double tap: Trigger the selected scene.
              - conditions:
                  - condition: template
                    value_template: >
                      {{ trigger.to_state.state == 'double' and double_tap_scene != '' }}
                sequence:
                  - service: scene.turn_on
                    target:
                      entity_id: !input double_tap_scene

              # Long press: Adjust brightness (for rocker switches only).
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.to_state.state == 'long' }}"
                sequence:
                  - variables:
                      current_brightness: "{{ state_attr(target_light, 'brightness') | int | default(0) }}"
                      new_brightness: >
                        {% if dimming_direction == 'up' %}
                          {{ [current_brightness + dimming_increment, 255] | min }}
                        {% else %}
                          {{ [current_brightness - dimming_increment, 0] | max }}
                        {% endif %}
                  - service: light.turn_on
                    target:
                      entity_id: !input target_light
                    data:
                      brightness: "{{ new_brightness }}"

      # Relay Mode (Direct Relay Control)
      - conditions:
          - condition: template
            value_template: >
              {{ relay_mode == 'relay'
                 and trigger.to_state.state in ['single', 'double']
                 and target_other != '' }}
        sequence:
          - service: switch.toggle
            target:
              entity_id: !input target_other

mode: restart
